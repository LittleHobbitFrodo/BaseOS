#!/bin/bash

black() { echo -e "\033[0;30m$1\033[0m"; }
red() { echo -e "\033[0;31m$1\033[0m"; }
green() { echo -e "\033[0;32m$1\033[0m"; }
yellow() { echo -e "\033[1;33m$1\033[0m"; }
blue() { echo -e "\033[0;34m$1\033[0m"; }
magenta() { echo -e "\033[0;35m$1\033[0m"; }
cyan() { echo -e "\033[0;36m$1\033[0m"; }
white() { echo -e "\033[0m$1\033[0m"; }

error() { echo "$(red ERROR): $1"; }
warning() { echo "$(yellow WARNING): $1"; }
note() { echo "$(magenta NOTE): $1"; }

CONFIG_PATH=$PWD/config/
KERNEL_CONFIG=$CONFIG_PATH/kernel.conf
OS_CONFIG=$CONFIG_PATH/os.conf
UTIL_CONFIG=$CONFIG_PATH/util.conf
SCRIPTS=$PWD/files/base/scripts

limine="$PWD/bootloader/limine/limine-$(uname)-$(uname -m)"
limine_path="$PWD/bootloader"
iso="$PWD/iso"
kernel_path="$PWD/files"
image_path="$PWD/files"

function failure() {
    status="$?"
    error "$(blue mkiso): command failure: $BASH_COMMAND (exitted with status $status)"
    exit 1
}

function get_arch() {
    case $a in
        x86_64)
            echo x86_64
        ;;
        arm64)
            echo aarch64
        ;;
    esac
}

function kernel_full() {
    echo "$kernel_path/$kernel_name-$(get_arch $1).bin"
}
function image_full() {
    echo "$image_path/$iso_name-$(get_arch $1).iso"
}

set -eEuo pipefail
trap failure ERR

#   store kernel info
source $KERNEL_CONFIG
kernel_name=$name
kernel_version=$version
kernel_release=$release

#   store OS info
source $OS_CONFIG
os_name=$name
os_version=$version
os_release=$release

source $UTIL_CONFIG

archs=""
debug=false
if [ "$#" != 0 ]; then
    for arg in "$@"; do
        a="$(echo $arg | tr '[:upper:]' '[:lower:]')"
        case $a in
            debug)
                debug=true
            ;;
            x86_64)
                archs="$archs x86_64"
            ;;
            arm64)
                archs="$archs aarch64"
            ;;
        esac
    done
else
    archs="$arch"
fi


IFS=" "
for a in $archs; do
    echo a: $a

    note "creating ISO for $a target"

    if [ -e "$iso" ]; then
        rm -rf $iso/*
    fi

    if [ ! -e "$(kernel_full $a)" ]; then
        error "kernel for $a target is missing"
        exit 2
    fi

    mkdir -p $iso/EFI/BOOT $iso/boot/limine
    cp $(kernel_full $a) $iso/boot/baseOS.bin

    if [ $debug == true ]; then
        limine_config="$limine_path/configs/limine-debug.conf"
    else
        limine_config="$limine_path/configs/limine.conf"
    fi

    echo "limine cfg: $limine_config"

    cp $limine_config $limine_path/limine-bios.sys $iso/boot/limine

    case $a in
        x86_64)
            efi_exe="BOOTX64.EFI"
        ;;
        *)
            error "target $iais not supported yet"
            efi_exe="BOOTX64.EFI"
        ;;
    esac

    echo "efi exe: $efi_exe"
    cp $limine_path/$efi_exe $iso/EFI/BOOT/

    cp $limine_path/limine-bios-cd.bin $limine_path/limine-uefi-cd.bin $iso/


    xorriso -as mkisofs -R -r -J -b limine-bios-cd.bin\
	-no-emul-boot -boot-load-size 4 -boot-info-table -hfsplus -apm-block-size 2048\
	--efi-boot limine-uefi-cd.bin -efi-boot-part --efi-boot-image\
	--protective-msdos-label $iso -o "$(image_full $a)"

    $limine bios-install $(image_full $a)

done
