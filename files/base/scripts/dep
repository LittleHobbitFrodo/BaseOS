#!/bin/bash

black() { echo -e "\033[0;30m$1\033[0m"; }
red() { echo -e "\033[0;31m$1\033[0m"; }
green() { echo -e "\033[0;32m$1\033[0m"; }
yellow() { echo -e "\033[1;33m$1\033[0m"; }
blue() { echo -e "\033[0;34m$1\033[0m"; }
magenta() { echo -e "\033[0;35m$1\033[0m"; }
cyan() { echo -e "\033[0;36m$1\033[0m"; }
white() { echo -e "\033[0m$1\033[0m"; }

error() { echo "$(red ERROR): $1"; }
warning() { echo "$(yellow WARNING): $1"; }
note() { echo "$(magenta NOTE): $1"; }


CONFIG_PATH=$PWD/config/
KERNEL_CONFIG=$CONFIG_PATH/kernel.conf
OS_CONFIG=$CONFIG_PATH/os.conf
UTIL_CONFIG=$CONFIG_PATH/util.conf
SCRIPTS=$PWD/files/base/scripts

function get_arch() {
    case $1 in
        x86_64)
            echo x86_64
        ;;
        arm64)
            echo aarch64
        ;;
    esac
}

function ask() {
    read -p "$1? [y/N]: " ans
    case "$ans" in
        [yY][eE][sS]|[yY]) echo y ;;
        *) echo n ;;
    esac
}


function search_path() {
    local old_ifs="$IFS"
    IFS=":"
    for i in $PATH; do
        if [ -e "$i/$1" ]; then
            IFS="$old_ifs"
            echo "$i/$1"
            return
        fi
    done
    IFS="$old_ifs"
    echo "NONE"
}

function is_excluded() {
    old_ifs="$IFS"
    IFS=" "
    for i in "${excluded[@]}"; do
        if [ "${excluded[$i]}" == "$1" ]; then
            IFS="$old_ifs"
            echo true
            return
        fi
    done
    IFS="$old_ifs"
    echo false
}

function check_package() {     #   returns if package should be added to the list regardles operation mode
    #   $1 = program name to search
    if [ $(is_excluded $2) == true ]; then
        echo EXCLUDED
        return
    fi
    if [ "$mode" == install ]; then
        if [ "$(search_path "$1")" == NONE ]; then
            echo OK
        else
            echo NONE
        fi
    else
        if [ "$(search_path "$1")" != NONE ]; then
            echo OK
        else
            echo NONE
        fi
    fi
}


packages=()
source $UTIL_CONFIG







if [ "$#" -eq 0 ]; then
    error "please tell me what to do $(green "install or remove?")"
    exit 1
fi

case "$(echo $1 | tr '[:upper:]' '[:lower:]')" in
    remove)
        mode=remove
        mode_str=removed
    ;;
    install)
        mode=install
        mode_str=installed
    ;;
    *) error "unknown option $arg"; exit 1 ;;
esac

#   find except packages
excluded=()
if [ "$#" -gt 2 ]; then
    for arg in $@; do
        if [[ "$arg" == "exclude" ]]; then
            collect=1
            echo found exclude
            continue
        fi
        if [[ $collect -eq 1 ]]; then
            echo "excluding: $arg"
            excluded+="$arg"
        fi
    done
fi

#   install rust
case $(check_package rustup rustup ) in
    OK)
        #   install rust
    ;;
    NONE)
        note "$(blue rust) is already installed"
    ;;
    EXCLUDED)
        note "$(blue rust) is excluded"
    ;;
esac


case "$(uname)" in
    Darwin)
        if [ $(search_path brew) == NONE ]; then
            warning "Homebrew is not installed"

            if [ "$(ask "$(yellow "would you like mo to install it")")" == y ]; then
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                if [ "$?" != 0 ]; then
                    error "Homebrew installation failed"
                    exit 2
                fi
            else
                error "Sorry, unable to work without Homebrew on mac :("
                exit 2
            fi
        fi


        case $lang in
            c)
                add_compiler=true       #   compiler + linker in one package
            ;;
            rust)
                add_compiler=false
            ;;
        esac

        #   find linker/compiler
        IFS=" "
        for i in $arch; do
            i="$(get_arch $i)"
            if [ $add_compiler == true ]; then
                case $(check_package "$i-elf-gcc" "$i-elf-gcc") in
                    OK) 
                        packages+=("$i-elf-gcc")
                    ;;
                    NONE)
                        note "$(blue "$i-elf-gcc") is already $mode_str"
                    ;;
                    EXCLUDED)
                        note "$(blue "$i-elf-gcc") is excluded"
                    ;;
                esac
            else
                case $(check_package "$i-elf-ld" "$i-elf-binutils") in
                    OK)
                        packages+=("$i-elf-binutils")
                    ;;
                    NONE)
                        note "$(blue "$i-elf-ld") is already $mode_str"
                    ;;
                    EXCLUDED)
                        note "$(blue "$i-elf-binutils") is excluded"
                    ;;
                esac
            fi
        done

        

        if [ "${#packages[@]}" -eq 0 ]; then
            note "all packages are already $mode_str"
            exit
        fi

        note "installing these packages: $(blue "${packages[@]}")"
        if [ $(ask "is this OK") == y ]; then
            brew $mode "${packages[@]}"
        else
            note "no packages were installed"
            exit
        fi


    ;;
esac













# case "$1" in
#     install) mode=install ;;
#     remove) mode=remove ;;
#     *) error "unknown operation '$2'"; exit 1 ;;
# esac

# if [ "$mode" == install ]; then
#     mode_str="installed"
# else
#     mode_str="removed"
# fi

# mode=install
# packages=""
# installed_packages=""
# needs_sudo=false        #   PM needs sudo
# pm=NONE     #   package manager
# pm_op=NONE      #   pm operation (install for dnf, -S for pacman etc.)

# pkgname_qemu="qemu"
# pkgname_xorriso="xorriso"


# source $UTIL_CONFIG
# if [ "$configured" != true ]; then
#     error "$(blue dep): the project is not configured"
#     note "please run $(green './util conf') to configure it"
#     exit 1
# fi


# case "$(uname)" in
#     Linux)
#         source /etc/os-release

#         case "$ID" in
#             fedora)
#                 echo "Welcome cowboy!"
#                 #   sudo dnf install cross-x86_64-elf-gcc cross-x86_64-elf-binutils?
#                 #   sudo dnf install cross-aarch64-elf-gcc cross-aarch64-elf-binutils
#                 #if [ $lang == c ]; then
#                     #if [ $(check_package cross-) ]
#                 #fi
#             ;;
#             ubuntu)
#                 echo "Ah, good old Ubuntu!"

#                 #if [ "$lang" == c ]; then

#                 #fi

#                 #   wget https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.Rel1-x86_64-aarch64-none-elf.tar.xz
#                 #   tar -xf arm-gnu-toolchain-13.2.Rel1-x86_64-aarch64-none-elf.tar.xz
#                 #   export PATH=$PWD/arm-gnu-toolchain-13.2.Rel1-x86_64-aarch64-none-elf/bin:$PATH
#                 #   ?
#             ;;
#             archlinux)
#                 echo "We doing hacking today"
#                 #   yay -S x86_64-elf-gcc ?
#                 #   yay -S aarch64-elf-gcc ?
#             ;;
#             debian)
#                 echo "Pretty dusty this old system"

#                 #   wget https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.Rel1-x86_64-aarch64-none-elf.tar.xz
#                 #   tar -xf arm-gnu-toolchain-*.tar.xz
#                 #   export PATH=$PWD/arm-gnu-toolchain-*/bin:$PATH
#                 #   aarch64-none-elf-gcc --version
#             ;;
#             centOS)
#                 echo "Worth more than just a cent!"
#             ;;
#         esac
#     ;;
#     Darwin)     #   macOS
#         pm="$(search_path brew)"
#         if [ "$pm" == NONE ]; then
#             error "Homebrew is not installed"
#             note "please install it following the instruction in https://brew.sh/"
#             return 2
#         fi

#         pm_op="$mode"
#         needs_sudo=false
#     ;;
#     FreeBSD)
#         echo "FreeBSD"
#     ;;
#     OpenBSD)
#         echo "Yes, one of my favourite software distributed by Berkley!"
#     ;;
# esac

# if [ "$packages" == "" ]; then
#     #   packages have "standard" names

#     case $lang in
#         c)
#             IFS=" "
#             for i in $arch; do
#                 if [ $(check_package "$(get_arch $i)-elf-gcc") == OK ]; then
#                     packages="$packages $(get_arch $i)-elf-gcc"
#                 else
#                     note "$(blue "$(get_arch $i)-elf-gcc") is already $mode_str"
#                 fi
#             done
#         ;;
#         rust)
#             IFS=" "
#             for i in $arch; do
#                 if [ $(check_package "$(get_arch $i)-elf-gcc") == OK ]; then
#                     packages="$packages $(get_arch $i)-elf-gcc"
#                 else
#                     note "$(blue "$(get_arch $i)-elf-gcc") is already $mode_str"
#                 fi
#             done
#         ;;
#     esac

#     if [ $(check_package "qemu-system-x86_64") == OK ]; then
#         packages="$packages $pkgname_qemu"
#     else
#         note "$(blue qemu) is already $mode_str"
#     fi

#     if [ $(check_package xorriso) == OK ]; then
#         packages="$packages $pkgname_xorriso"
#     else
#         note "$(blue xorriso) is already $mode_str"
#     fi

# fi


# #   install rust
# if [ $(check_package rustup) == OK ]; then
#     #   TODO! install rust
#     note "installing rust (may be interactive)"
#     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

#     if [[ "$?" != 0 || $(search_path rustup) == NONE ]]; then
#         error "rust installation was unsuccessfull"
#         exit 2
#     fi

#     note "if you would like to uninstall rust, run $(red "rustup self uninstall")"
    
#     IFS=" "
#     for i in $arch; do 
#         $rustup target add "$(get_arch $i)-unknown-none"
#         if [ "$?" != 0 ]; then error "failed to install rust target $(get_arch $i)-unknown-none"; exit 2; fi
#     done

# else
#     note "$(blue rust) is already $mode_str"
# fi

# if [ "$packages" == "" ]; then
#     note "all packages are already $mode_str!"
#     exit 0
# fi


# if [ "$mode" == install ]; then
#     note "installing these packages: $packages"
# else
#     note "removing these packages: $packages"
# fi

# exit


# if [ "$needs_sudo" == true ]; then
#     note "please enter your password for sudo ($(blue "$pm $pm_op $packages"))"
#     sudo $pm $pm_op $packages
# else
#     $pm $pm_op $packages
# fi

# if [ "$?" != 0 ]; then
#     error "could not install packages"
#     exit 2
# fi
