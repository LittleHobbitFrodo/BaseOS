#!/bin/bash


source "$PWD/files/base/scripts.conf"

if [ $# -eq 0 ]; then
    error "$(blue conf): expected at least 2 parameters: $(yellow architecture) and $(yellow language)"
    exit 1
fi

baseos_url="https://github.com/LittleHobbitFrodo/baseOS.git"

#if [ -e "$UTIL_CONFIG" ]; then

#    if [ "$configured" == true ]; then
#        error "project is already configured"
#        exit 2
#    fi
#fi



arch=()
lang=""
iso_name=BaseOS     #   -<arch>.iso will be added by the build subcommand
    #   iso files are located in the ./files directory
all_tools_installed=true
download=true
main_file=NONE




#   resolve lang and arch
for arg in "$@"; do
    i="$(echo $arg | tr '[:upper:]' '[:lower:]')"
    case $i in
        c)
            if [ -z "$lang" ]; then
                lang="$i"
            else
                error "only one language is supported"
                exit 1
            fi
        ;;
        rust)
            if [ -z "$lang" ]; then
                lang="$i"
            else
                error "only one language is supported"
                exit 1
            fi
        ;;
        x86_64)
            if [[ ! " ${arch[@]} " =~ " ${i} " ]]; then
                arch+=("$i")
            fi
        ;;
        arm64)
            if [[ ! " ${arch[@]} " =~ " ${i} " ]]; then
                arch+=("$i")
            fi
        ;;
        "-no-download")
            download=false
        ;;
        *)
            error "'$arg' is not valid architecture or language"
            exit 1
        ;;
    esac
done

if [[ "$lang" == c && "$main_file" == NONE ]]; then
    main_file="./kernel/src/init.c"
fi

if [[ ! -e "$PWD/kernel" && "$download" == true ]]; then

    note "downloading BaseOS $lang branch"
    case "$lang" in 
        c)
            git clone "$baseos_url" --branch C
            if [ $# != 0 ]; then
                error "failed to clone $(blue "git clone $baseos_url --branch C")"
                exit 2
            fi
            cp -R ./baseOS-C/* ./
            if [ $# != 0 ]; then
                error "failed to copy C sources"
                exit 2
            fi
        ;;
        rust)
            git clone "$baseos_url" --branch rust
            if [ $# != 0 ]; then
                error "failed to clone $(blue "git clone $baseos_url --branch rust")"
                exit 2
            fi
            cp -R ./baseOS/kernel ./baseOS/files ./
            if [ $# != 0 ]; then
                error "failed to copy rust sources"
                exit 2
            fi
        ;;
    esac
else
    if [ "$download" == false ]; then
        note "BaseOS $lang branch downloading was disabled"
    else
        note "looks like BaseOS $lang branch is already downloaded"
    fi
fi



note "creating utility configuration"

echo "# This is util configuration, please do not change manually" > $UTIL_CONFIG
echo "configured=true" >> $UTIL_CONFIG
echo "xorriso=$(search_path xorriso)" >> $UTIL_CONFIG
echo "arch=\"${arch[@]}\"" >> $UTIL_CONFIG
echo "lang=$lang" >> $UTIL_CONFIG
echo "iso_name=$iso_name" >> $UTIL_CONFIG
echo "main_file=$main_file" >> $UTIL_CONFIG


c_compiler_midnames="-elf- -linux-gnu-"       #   without the last -
IFS=" "
for i in "${arch[@]}"; do
    compiler=NONE
    linker=NONE
    #   check the compiler
    case "$lang" in
        c)
            for cc in $c_compiler_midnames; do
                if [ $compiler == NONE ]; then
                    compiler="$(search_path "$(get_arch $i)$cc$(echo gcc)")"
                fi
                if [ $linker == NONE ]; then
                    linker="$(search_path "$(get_arch $i)$cc$(echo ld)")"
                fi
                if [[ "$compiler" != NONE && "$linker" != NONE ]]; then
                    break
                fi
            done
        ;;
        rust)
            compiler="$(search_path cargo)"
            linker="$(search_path "$(get_arch $i)-elf-ld")"
        ;;
    esac
    qemu="$(search_path "qemu-system-$(get_arch $i)")"

    config_file="$(arch_config $i)"

    if [ "$compiler" == NONE ]; then
        warning "compiler for the $i target is missing"
        all_tools_installed=false
    fi

    if [ "$linker" == NONE ]; then
        warning "linker for the $i target is missing"
        all_tools_installed=false
    fi

    if [ "$qemu" == NONE ]; then
        warning "emulator fot the $i target is missong"
        all_tools_installed=false
    fi

    note "creating configuration for the $i target"

    #   flush the config
    echo "# This is util $i target configuration, please do not edit manually" > $config_file
    echo "compiler=$compiler" >> $config_file
    echo "linker=$linker" >> $config_file
    echo "emulator=$qemu" >> $config_file

done

if [ ! -e $KERNEL_CONFIG ]; then
    echo "name=BaseOS-kernel" > $KERNEL_CONFIG
    echo "version=0.0.1" >> $KERNEL_CONFIG
    echo "release=BaseOS-v0.0.1" >> $KERNEL_CONFIG
fi

if [ ! -e $OS_CONFIG ]; then
    echo "name=BaseOS" > $OS_CONFIG
    echo "version=0.0.1" >> $OS_CONFIG
    echo "release=BaseOS-v0.0.1" >> $OS_CONFIG
fi

if [ "$all_tools_installed" != true ]; then
    warning "some development dependencies are missing, try running $(green "./util dep install") and then $(green "./util reconf")"
fi
