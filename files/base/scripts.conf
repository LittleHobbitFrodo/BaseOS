#   this file contains all variables and functions used in util and its subcommands
#   it also covers all config files (to disable that simply define the SCRIPTS_CONF_DISABLE_CONFIGS variable)


#   prints coloured output
function black() { echo -e "\033[0;30m$1\033[0m"; }
function red() { echo -e "\033[0;31m$1\033[0m"; }
function green() { echo -e "\033[0;32m$1\033[0m"; }
function yellow() { echo -e "\033[1;33m$1\033[0m"; }
function blue() { echo -e "\033[0;34m$1\033[0m"; }
function magenta() { echo -e "\033[0;35m$1\033[0m"; }
function cyan() { echo -e "\033[0;36m$1\033[0m"; }
function white() { echo -e "\033[0m$1\033[0m"; }

function error() { echo "$(red ERROR): $1"; }
function warning() { echo "$(yellow WARNING): $1"; }
function note() { echo "$(magenta NOTE): $1"; }

CONFIG_PATH=$PWD/config/
KERNEL_CONFIG=$CONFIG_PATH/kernel.conf
OS_CONFIG=$CONFIG_PATH/os.conf
UTIL_CONFIG=$CONFIG_PATH/util.conf
SCRIPTS=$PWD/files/base/scripts
kernel_path="$PWD/files"
image_path="$PWD/files"


#   store kernel info
if [ -e "$KERNEL_CONFIG" ]; then
    source $KERNEL_CONFIG
    kernel_name=$name
    kernel_version=$version
    kernel_release=$release
fi

#   store OS info
if [ -e "$OS_CONFIG" ]; then
    source $OS_CONFIG
    os_name=$name
    os_version=$version
    os_release=$release
fi

if [ -e "$UTIL_CONFIG" ]; then
    source $UTIL_CONFIG
fi


function get_arch() {
    case $1 in
        x86_64)
            echo x86_64
        ;;
        arm64)
            echo aarch64
        ;;
    esac
}

function arch_config() {        #   returns path to arch-specific config
    echo "$CONFIG_PATH/util-$1.conf"
}

function search_path() {        #   searchs path for specific command
    #   returns NONE if not found
    local old_ifs="$IFS"
    IFS=":"
    for i in $PATH; do
        if [ -e "$i/$1" ]; then
            IFS="$old_ifs"
            echo "$i/$1"
            return
        fi
    done
    IFS="$old_ifs"
    echo NONE
}

function ask() {        #   asks user and returns if he agrees or not
    read -p "$1? [y/N]: " ans
    case "$ans" in
        [yY][eE][sS]|[yY]) echo y ;;
        *) echo n ;;
    esac
}

function kernel_full() {        #   returns path to arch-specific kernel binary
    echo "$kernel_path/$kernel_name-$(get_arch $1).bin"
}
function image_full() {         #   returns path to arch-specific OS iso
    echo "$image_path/$iso_name-$(get_arch $1).iso"
}