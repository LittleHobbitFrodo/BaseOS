#!/bin/bash

black() { echo -e "\033[0;30m$1\033[0m"; }
red() { echo -e "\033[0;31m$1\033[0m"; }
green() { echo -e "\033[0;32m$1\033[0m"; }
yellow() { echo -e "\033[1;33m$1\033[0m"; }
blue() { echo -e "\033[0;34m$1\033[0m"; }
magenta() { echo -e "\033[0;35m$1\033[0m"; }
cyan() { echo -e "\033[0;36m$1\033[0m"; }
white() { echo -e "\033[0m$1\033[0m"; }

error() { echo "$(red ERROR): $1"; }
warning() { echo "$(yellow WARNING): $1"; }
note() { echo "$(magenta NOTE): $1"; }


function report() {
    status="$?"
    if [ -n "${subcmd+x}" ]; then
        echo "$(red "OPERATION $subcmd FAILED")"
        if [[ -e "$SCRIPTS/$subcmd" && "$status" == 1 ]]; then
            $SCRIPTS/help $subcmd
        fi
    else
        echo "$(red "COMMAND $BASH_COMMAND FAILED")"
    fi
    exit 1
}

set -eEuo pipefail

#   set function to call if anything fails
trap report ERR

CONFIG_PATH=$PWD/config/
KERNEL_CONFIG=$CONFIG_PATH/kernel.conf
OS_CONFIG=$CONFIG_PATH/os.conf
UTIL_CONFIG=$CONFIG_PATH/util.conf
SCRIPTS=$PWD/files/base/scripts




#   SCRIPT ENTRY POINT
if [ "$#" -lt 1 ]; then
    error "no command given"
    echo
    $SCRIPTS/help
    exit 1
fi

if [[ ! -e "$UTIL_CONFIG" && "$1" != conf ]]; then
    error "The project is not configured"
    echo
    $SCRIPTS/help conf
    exit 1
fi

source $UTIL_CONFIG

if [ $configured != true ]; then
    error "The project is not configured"
    echo
    $SCRIPTS/help conf
    exit 1
fi

args="${@:2}"
subcmd=$1


if [ -e "$SCRIPTS/$subcmd" ]; then
    $SCRIPTS/$subcmd $args
else
    error "subcommand '$subcmd' does not exist"
    $SCRIPTS/help
    exit 1
fi

